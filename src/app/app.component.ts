import { Component, ViewChild, ElementRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from  "rxjs/Rx";
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/toPromise';

import { MdDialog, MdDialogRef, MdSnackBar } from '@angular/material';

import * as d3 from "d3";
// import * as graphlib-dot from "graphlib-dot";

import { ElasticsearchService } from './services';


/**
 * The root-component for the app
 */
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Malware Graph Analysis';
  query = new FormControl();
  total: number;
  results: {_index:string, _id: string, _type: string, _source: Object, highlight: Object};
  graphSvg: any;
  selectedNode: any;
  @ViewChild('graphContainer') graphContainer: ElementRef;

  constructor(
    private elasticsearchService: ElasticsearchService,
    private elementRef: ElementRef
  ) { }

  
  ngOnInit() {
    this.query.valueChanges
      .debounceTime(400)
      .distinctUntilChanged()
      .do(query => {
        if (query.length == 0) {
          this.total = undefined;
        }
      })
      .filter(query => query.length > 0)
      .switchMap(query => this.elasticsearchService.search(query))
      .subscribe(res => {
        this.total = res['total'];
        this.results = res['hits'];
        // this.results.map(res => res['except'])
      },
      error =>  console.log('incorrect search query'))
  }

  ngAfterViewInit() {
    this.elasticsearchService.fetch(
      '00cafd92ff4ead8b6a27a0824b0f3b35a5972bc79fb5d54a42e3114cc923b80d', 'svg')
      .toPromise()
      .then(res => {
        this.graphContainer.nativeElement.innerHTML = res;
        this.enableInteractive();
        this.enableZoom();
      })
  }

  selectGraph(graphId) {
    this.elasticsearchService.fetch(graphId, 'svg')
      .subscribe(res => {
        this.graphContainer.nativeElement.innerHTML = res;
        this.enableZoom();
        this.enableInteractive();
      })
  }

  enableZoom() {
    // let viewDiv = d3.select(this.graphContainer.nativeElement);
    let svg = d3.select(this.graphContainer.nativeElement).select('svg');

    // svg.select('g').attr('transform', 'scale(1 1) rotate(0)')

    // let divWidth = +viewDiv.style('width').slice(0, -2);
    // let divHeight = +viewDiv.style('height').slice(0, -2);
    // let svgViewBox = svg.attr('viewBox').split(' ');
    // let svgWidth = +svgViewBox[2];
    // let svgHeight = +svgViewBox[3];
    // let corFactor = Math.max(svgWidth/divWidth, svgHeight/divHeight);

    svg
      // .append("rect")
      // .attr("width", divWidth*corFactor)
      // .attr("height", divHeight*corFactor)
      // .attr("x", -(divWidth*corFactor-svgWidth)/2)
      // .attr("y", -(divHeight*corFactor-svgHeight)/2)
      // .attr("fill", "none")
      .attr("pointer-events", "all")
      .call(d3.zoom()
          .scaleExtent([1 / 2, 4])
          .on("zoom", () => svg.select('g').attr("transform", d3.event.transform)));
  }

  enableInteractive() {
    var that = this;
    let svg = d3.select(this.graphContainer.nativeElement).select('svg');
    svg.selectAll('g.node').style("cursor", "pointer");
    svg.selectAll('g.node')
      .on('mouseover', function(d, i) {
        console.log(d3.select(this).select('title').text());
        that.selectedNode = d3.select(this).select('title').text();
        d3.select(this).select('ellipse').attr('fill', '#af8')

      })
    svg.selectAll('g.node')
      .on('mouseout', function(d, i) {
        d3.select(this).select('ellipse').attr('fill', 'none')
          // .style("cursor", "default");
      })
  }

}
